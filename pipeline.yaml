name: "Test Pipeline"

# Map of context variables available to all steps
# Values are evaluated as a lua templates in the order defined
globals:
  protocol: https
  host: jsonplaceholder.typicode.com
  baseUrl: "{{ protocol }}://{{ host }}"
  timeout_ms: 500

stages:
  - name: "default"
  - name: "one"
  - name: "Stage Two"
    concurrent: true

steps:
  - desc: "Fetch Todos 1"
    method: "Get"
    url: "{{ baseUrl }}/todos/1"
    headers:
      Content-Type: "application/json"
    post_script: |+
      local parsedResponse = json.decode(ctx.http_response.body_string)
      ctx.title = parsedResponse.title
      return true

  - desc: "Fetch TODOS 2"
    method: "Get"
    url: "{{ baseUrl }}/todos/1"
    when: |+
      --os.execute("sleep 2")
      return ctx.title ~= nil and ctx.title ~= ''
    post_script: |+
      --os.execute("sleep 2")
      local parsedResponse = json.decode(ctx.http_response.body_string)
      assert(ctx.title == parsedResponse.title, "Title mismatch")
      return true

  - desc: "Fetch Todos 3"
    method: "Get"
    url: "{{ baseUrl }}/todos/1"
    headers:
      Content-Type: "application/json"
    post_script: |+
      --os.execute("sleep 5")
      local parsedResponse = json.decode(ctx.http_response.body_string)
      ctx.title = parsedResponse.title
      return true

  - desc: "Stage Two 1"
    stage: "Stage Two"
    method: "Get"
    url: "{{ baseUrl }}/todos/1"
    when: "return ctx.title ~= nil and ctx.title ~= ''"
    post_script: |+
      --os.execute("sleep 2")
      return true

  - desc: "Stage Two 2"
    stage: "Stage Two"
    method: "Get"
    url: "{{ baseUrl }}/todos/1"
    when: "return ctx.title ~= nil and ctx.title ~= ''"
    post_script: |+
      --os.execute("sleep 2")
      local parsedResponse = json.decode(ctx.http_response.body_string)
      assert(ctx.title == parsedResponse.title .. "-", "Title mismatch")
      return true

  - desc: "Stage Two 3"
    stage: "Stage Two"
    method: "Get"
    url: "{{ baseUrl }}/todos/1"
    when: "return ctx.title ~= nil and ctx.title ~= ''"
    post_script: |+
      --os.execute("sleep 2")
      --return false
      error("Custom Error")

  - desc: "Stage Two 4"
    stage: "Stage Two"
    method: "Get"
    url: "{{ baseUrl }}/todos/1"
    when: "return false"
    post_script: |+
      --os.execute("sleep 2")
      return true



  - desc: "Stage Two 3"
    stage: "Stage Two"
    method: "Get"
    url: "{{ baseUrl }}/todos/1"
    when: "return ctx.title ~= nil and ctx.title ~= ''"
    post_script: |+
      --os.execute("sleep 2")
      return true

  - desc: "Stage Two 4"
    stage: "Stage Two"
    method: "Get"
    url: "{{ baseUrl }}/todos/1"
    when: "return ctx.title ~= nil and ctx.title ~= ''"
    post_script: |+
      --os.execute("sleep 2")
      return true